local lib = {}
local gui = Instance.new("ScreenGui", game.CoreGui)

-- Função para arrastar a janela
local function makeDraggable(frame, dragHandle)
    local dragging, dragInput, startPos, dragStart = false, nil, nil, nil

    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

function lib:Window(t)
    local w = Instance.new("Frame", gui)
    w.Size = UDim2.new(0, 400, 0, 300)
    w.Position = UDim2.new(0.5, -200, 0.5, -150)
    w.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    w.BorderSizePixel = 0

    local h = Instance.new("TextLabel", w)
    h.Size = UDim2.new(1, 0, 0, 30)
    h.Text = t
    h.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    h.TextColor3 = Color3.new(1, 1, 1)
    h.Font = Enum.Font.SourceSans
    h.TextSize = 18
    h.BorderSizePixel = 0
    h.TextXAlignment = Enum.TextXAlignment.Left

    local padding = Instance.new("UIPadding", h)
    padding.PaddingLeft = UDim.new(0, 10)

    makeDraggable(w, h)
    return w
end

function lib:Tab(w, t)
    local tabHolder = w:FindFirstChild("TabHolder") or Instance.new("Frame", w)
    tabHolder.Name = "TabHolder"
    tabHolder.Size = UDim2.new(1, 0, 1, -30)
    tabHolder.Position = UDim2.new(0, 0, 0, 30)
    tabHolder.BackgroundTransparency = 1

    local tabButton = Instance.new("TextButton", tabHolder)
    tabButton.Size = UDim2.new(0, 80, 0, 30)
    tabButton.Text = t
    tabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    tabButton.TextColor3 = Color3.new(1, 1, 1)
    tabButton.Font = Enum.Font.SourceSans
    tabButton.TextSize = 16
    tabButton.BorderSizePixel = 0

    local tabContent = Instance.new("Frame", tabHolder)
    tabContent.Size = UDim2.new(1, 0, 1, -30)
    tabContent.Position = UDim2.new(0, 0, 0, 30)
    tabContent.BackgroundTransparency = 1
    tabContent.Visible = false

    tabButton.MouseButton1Click:Connect(function()
        for _, child in ipairs(tabHolder:GetChildren()) do
            if child:IsA("Frame") then
                child.Visible = false
            end
        end
        tabContent.Visible = true
    end)

    return tabContent
end

function lib:Button(parent, t, f)
    local b = Instance.new("TextButton", parent)
    b.Size = UDim2.new(1, -20, 0, 30)
    b.Position = UDim2.new(0, 10, 0, 10)
    b.Text = t
    b.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    b.TextColor3 = Color3.new(1, 1, 1)
    b.Font = Enum.Font.SourceSans
    b.TextSize = 16
    b.BorderSizePixel = 0
    b.MouseButton1Click:Connect(f)
    return b
end

function lib:Slider(parent, t, min, max, callback)
    local sliderFrame = Instance.new("Frame", parent)
    sliderFrame.Size = UDim2.new(1, -20, 0, 50)
    sliderFrame.Position = UDim2.new(0, 10, 0, 50)
    sliderFrame.BackgroundTransparency = 1

    local sliderLabel = Instance.new("TextLabel", sliderFrame)
    sliderLabel.Size = UDim2.new(1, 0, 0, 20)
    sliderLabel.Text = t
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.TextColor3 = Color3.new(1, 1, 1)
    sliderLabel.Font = Enum.Font.SourceSans
    sliderLabel.TextSize = 14

    local sliderBar = Instance.new("Frame", sliderFrame)
    sliderBar.Size = UDim2.new(1, 0, 0, 5)
    sliderBar.Position = UDim2.new(0, 0, 0, 30)
    sliderBar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)

    local sliderButton = Instance.new("Frame", sliderBar)
    sliderButton.Size = UDim2.new(0, 10, 1, 0)
    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

    local dragging = false
    sliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    sliderButton.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouseX = math.clamp(input.Position.X - sliderBar.AbsolutePosition.X, 0, sliderBar.AbsoluteSize.X)
            sliderButton.Position = UDim2.new(0, mouseX - sliderButton.Size.X.Offset / 2, 0, 0)
            local value = math.floor(min + ((mouseX / sliderBar.AbsoluteSize.X) * (max - min)))
            callback(value)
        end
    end)

    return sliderFrame
end

return lib

